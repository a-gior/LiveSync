import {
  Disposable,
  Webview,
  WebviewPanel,
  window,
  Uri,
  ViewColumn,
  workspace,
  ConfigurationTarget,
  ExtensionContext,
} from "vscode";
import { Panel } from "./Panel";

import { ConfigurationMessage } from "@shared/DTOs/messages/ConfigurationMessage";
import { ConfigurationState } from "@shared/DTOs/states/ConfigurationState";
import { Client } from "ssh2";
import { SFTPClient } from "../services/SFTPClient";
import { Message } from "@shared/DTOs/messages/Message";
import { PairFoldersMessage } from "@shared/DTOs/messages/PairFoldersMessage";
import * as fs from "fs";
import { FullConfigurationMessage } from "@shared/DTOs/messages/FullConfigurationMessage";

export class ConfigurationPanel extends Panel {
  static render(extensionUri: Uri) {
    const viewType = "configurationViewType";
    const title = "Configuration";
    const localResourceRoots = [
      Uri.joinPath(extensionUri, "out"),
      Uri.joinPath(extensionUri, "webview-ui/public/build"),
    ];
    const configurationCallback = async (message: FullConfigurationMessage) => {
      switch (message.command) {
        case "updateConfiguration":
          console.log("UpdateConfiguration...");
          if (message.configuration) {
            await this.updateConfiguration(message.configuration);
          }
          if (message.pairedFolders) {
            await this.savePairFolders(message.pairedFolders);
          }
          break;
        case "testConnection":
          console.log("TestConnection...");
          if (message.configuration) {
            await this.testConnection(message.configuration);
          }
          break;
        case "savePairFolders":
          console.log("Save Pair Folders...");
          if (message.pairedFolders) {
            await this.savePairFolders(message.pairedFolders);
          }
          break;
      }
    };
    const filepaths = [
      "webview-ui/public/build/media/reset.css",
      "webview-ui/public/build/media/vscode.css",
      "webview-ui/public/build/pages/configuration/configuration.css", // generated by compiling svelte with rollup
      "webview-ui/public/build/pages/configuration/configuration.js", // generated by compiling svelte with rollup
    ];

    // Call the render method from the parent class with additional parameters
    super.render(
      extensionUri,
      viewType,
      title,
      localResourceRoots,
      filepaths,
      configurationCallback,
      // Additional options if needed
    );

    const workspaceConfig = this.getWorkspaceConfiguration();

    if (workspaceConfig) {
      const fullConfigMessage: FullConfigurationMessage = {
        command: "setInitialConfiguration",
        configuration: workspaceConfig.configuration,
        pairedFolders: workspaceConfig.pairedFolders,
      };

      this.currentPanel?.getPanel().webview.postMessage(fullConfigMessage);
    }
  }

  static async savePairFolders(
    pairedFoldersArr: PairFoldersMessage["paths"][],
  ) {
    console.log("DEBUGGING pairedFolders: ", pairedFoldersArr);

    const config = workspace.getConfiguration("LiveSync");
    const currentConnectionConfig = this.getWorkspaceConfiguration();

    for (const pairedFolders of pairedFoldersArr) {
      if (
        currentConnectionConfig &&
        currentConnectionConfig.configuration &&
        currentConnectionConfig.pairedFolders
      ) {
        const { localPath, remotePath } = pairedFolders;
        const client = new SFTPClient();
        await client.connect(currentConnectionConfig.configuration);

        if (!fs.existsSync(localPath)) {
          console.log(
            `Local folder not found. Local path: ${localPath} & remote path: ${remotePath}`,
          );
          window.showErrorMessage("Local folder not found");
          return;
        } else if (!(await client.pathExists(remotePath))) {
          console.log(
            `Remote folder not found. Local path: ${localPath} & remote path: ${remotePath}`,
          );
          window.showErrorMessage("Remote folder not found");
          return;
        }
      } else {
        window.showErrorMessage(
          "No configuration found or missing properties. Please configure LiveSync correctly",
        );
        return;
      }
    }

    // All good so we update the pairedFolders config
    await config.update(
      "pairedFolders",
      pairedFoldersArr,
      ConfigurationTarget.Workspace,
    );
    window.showInformationMessage("Paired Folders are valid and saved");
  }

  static async updateConfiguration(
    configuration: ConfigurationMessage["configuration"],
  ) {
    const config = workspace.getConfiguration("LiveSync");
    const { hostname, port, username, authMethod, password, sshKey } =
      configuration;

    await config.update("hostname", hostname, ConfigurationTarget.Workspace);
    await config.update("port", port, ConfigurationTarget.Workspace);
    await config.update("username", username, ConfigurationTarget.Workspace);
    await config.update(
      "authMethod",
      authMethod,
      ConfigurationTarget.Workspace,
    );
    await config.update("password", password, ConfigurationTarget.Workspace);
    await config.update("sshKey", sshKey, ConfigurationTarget.Workspace);
  }

  static async testConnection(
    configuration: ConfigurationMessage["configuration"],
  ): Promise<boolean> {
    // Test SFTP connection
    //* Open the connection
    const client = new SFTPClient();
    // console.log("[testConnection] SFTP Client with config: ", configuration);
    await client.connect(configuration);

    const clientErrors = client.getErrors();

    // //* List working directory files
    // await client.listFiles(".");

    // //* Upload local file to remote file
    // await client.uploadFile("./local.txt", "./remote.txt");

    // //* Download remote file to local file
    // await client.downloadFile("./remote.txt", "./download.txt");

    // //* Delete remote file
    // await client.deleteFile("./remote.txt");

    //* Close the connection
    await client.disconnect();

    if (clientErrors.length > 0) {
      window.showErrorMessage(clientErrors[0].error.message);
      return false;
    } else {
      window.showInformationMessage("Test Connection successful");
      return true;
    }
  }

  static getWorkspaceConfiguration(): ConfigurationState | null {
    const config = workspace.getConfiguration("LiveSync");

    // Get individual configuration values
    const hostname = config.get<string>("hostname");
    const port = config.get<number>("port");
    const username = config.get<string>("username");
    const authMethod = config.get<string | undefined>("authMethod");
    const password = config.get<string>("password");
    const sshKeyFilePath = config.get<string>("sshKey");

    const pairedFolders =
      config.get<Array<PairFoldersMessage["paths"]>>("pairedFolders");

    // Return null if any value is empty or undefined
    if (!hostname || !port || !username || (!password ?? !sshKeyFilePath)) {
      // console.log("One is null", {hostname, port, username, authMethod, password, sshKeyFilePath});
      return null;
    }

    // Construct the workspace configuration object
    const workspaceConfig: ConfigurationState = {
      configuration: {
        hostname: hostname,
        port: port,
        username: username,
        authMethod: authMethod,
        password: password,
        sshKey: sshKeyFilePath,
      },
      pairedFolders: pairedFolders,
    };

    return workspaceConfig;
  }
}
