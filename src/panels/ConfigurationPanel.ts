import { window, Uri, workspace, ConfigurationTarget } from "vscode";
import { Panel } from "./Panel";

import { ConfigurationMessage } from "@shared/DTOs/messages/ConfigurationMessage";
import { ConfigurationState } from "@shared/DTOs/states/ConfigurationState";
import { SFTPClient } from "../services/SFTPClient";
import { PairFoldersMessage } from "@shared/DTOs/messages/PairFoldersMessage";
import * as fs from "fs";
import { FullConfigurationMessage } from "@shared/DTOs/messages/FullConfigurationMessage";
import { FileEventActionsMessage } from "@shared/DTOs/messages/FileEventActionsMessage";
import { ConnectionManager } from "../services/ConnectionManager";
import { SSHClient } from "../services/SSHClient";
import { WorkspaceConfig } from "../services/WorkspaceConfig";

export class ConfigurationPanel extends Panel {
  static render(extensionUri: Uri) {
    const viewType = "configurationViewType";
    const title = "Configuration";
    const localResourceRoots = [
      Uri.joinPath(extensionUri, "out"),
      Uri.joinPath(extensionUri, "resources"),
      Uri.joinPath(extensionUri, "webview-ui/public/build"),
    ];
    const configurationCallback = async (message: FullConfigurationMessage) => {
      switch (message.command) {
        case "updateConfiguration":
          console.log("Update all configurations...");
          await this.updateConfiguration(message);
          break;
        case "testConnection":
          console.log("TestConnection...");
          if (message.configuration) {
            await this.testConnection(message.configuration);
          }
          break;
        case "savePairFolders":
          break;
      }
    };
    const filepaths = [
      "resources/css/reset.css",
      "resources/css/vscode.css",
      "webview-ui/public/build/pages/configuration/configuration.css", // generated by compiling svelte with rollup
      "webview-ui/public/build/pages/configuration/configuration.js", // generated by compiling svelte with rollup
    ];

    // Call the render method from the parent class with additional parameters
    super.render(
      extensionUri,
      viewType,
      title,
      localResourceRoots,
      filepaths,
      configurationCallback,
      // Additional options if needed
    );

    const allWorkspaceConfig: FullConfigurationMessage = {
      command: "setInitialConfiguration",
      ...WorkspaceConfig.getInstance().getAll(),
    };
    this.currentPanel?.getPanel().webview.postMessage(allWorkspaceConfig);
  }

  static async savePairFolders(
    pairedFoldersArr: PairFoldersMessage["paths"][],
  ) {
    const workspaceConfig = WorkspaceConfig.getInstance();
    const configuration = workspaceConfig.getRemoteServerConfigured();
    // const pairedFolders = workspaceConfig.getPairedFoldersConfigured();

    for (const pairedFolders of pairedFoldersArr) {
      const connectionManager = ConnectionManager.getInstance(configuration);
      connectionManager
        .doSFTPOperation(async (sftpClient: SFTPClient) => {
          const { localPath, remotePath } = pairedFolders;
          if (!(await sftpClient.pathExists(remotePath))) {
            console.error(
              `Remote folder not found. Local path: ${localPath} & remote path: ${remotePath}`,
            );
            window.showErrorMessage(`Remote folder ${remotePath} not found`);
            return;
          } else if (!fs.existsSync(localPath)) {
            console.error(
              `Local folder not found. Local path: ${localPath} & remote path: ${remotePath}`,
            );
            window.showErrorMessage(`Local folder ${localPath} not found`);
            return;
          } else {
            console.log("Paired Folders are valid");
          }
        })
        .then(async () => {
          // All good so we update the pairedFolders config
          await workspaceConfig.update("pairedFolders", pairedFoldersArr);
          console.log("Paired Folders are saved");
          window.showInformationMessage("Paired Folders are valid and saved");
        });
    }
  }

  static async saveFileEventActions(
    actions: FileEventActionsMessage["actions"],
  ) {
    const config = workspace.getConfiguration("LiveSync");
    if (actions) {
      config.update("actionOnSave", actions.actionOnSave, true);
      config.update("actionOnCreate", actions.actionOnCreate, true);
      config.update("actionOnDelete", actions.actionOnDelete, true);
      config.update("actionOnMove", actions.actionOnMove, true);

      console.log("File event actions saved successfully.");
      window.showInformationMessage("File event actions saved.");
    } else {
      window.showErrorMessage(
        "No configuration found or missing properties. Please configure LiveSync correctly.",
      );
      return;
    }
  }

  static async saveRemoteServerConfiguration(
    configuration: ConfigurationState["configuration"],
  ) {
    if (configuration) {
      const connectionManager = ConnectionManager.getInstance(configuration);

      connectionManager
        .doSSHOperation(async (sshClient: SSHClient) => {
          sshClient.waitForConnection();
        })
        .then(async () => {
          const config = workspace.getConfiguration("LiveSync");
          const { hostname, port, username, authMethod, password, sshKey } =
            configuration;

          await config.update(
            "hostname",
            hostname,
            ConfigurationTarget.Workspace,
          );
          await config.update("port", port, ConfigurationTarget.Workspace);
          await config.update(
            "username",
            username,
            ConfigurationTarget.Workspace,
          );
          await config.update(
            "authMethod",
            authMethod,
            ConfigurationTarget.Workspace,
          );
          await config.update(
            "password",
            password,
            ConfigurationTarget.Workspace,
          );
          await config.update("sshKey", sshKey, ConfigurationTarget.Workspace);

          console.log("Remote server configuration saved successfully.");
          window.showInformationMessage("Remote server configuration saved.");
        })
        .catch((err: any) => {
          console.error("Remote server configuration couldnt be saved.", err);
          window.showErrorMessage(
            `Remote server configuration couldn't be saved. \n${err.message}`,
          );
        });
    } else {
      window.showErrorMessage(
        "No configuration found or missing properties. Please configure LiveSync correctly.",
      );
      return;
    }
  }

  static async updateConfiguration(configuration: FullConfigurationMessage) {
    this.saveRemoteServerConfiguration(configuration.configuration);

    if (configuration.pairedFolders) {
      this.savePairFolders(configuration.pairedFolders);
    }
    if (configuration.fileEventActions) {
      this.saveFileEventActions(configuration.fileEventActions);
    }
  }

  static async testConnection(
    configuration: ConfigurationMessage["configuration"],
  ): Promise<boolean> {
    const connectionManager = ConnectionManager.getInstance(configuration);
    connectionManager.doSSHOperation(async (sshClient: SSHClient) => {
      sshClient.waitForConnection();
    });

    const errors = connectionManager.getSSHClient().getErrors();
    if (errors.length > 0) {
      window.showErrorMessage(errors[0].error.message);
      return false;
    } else {
      window.showInformationMessage("Test Connection successful");
      return true;
    }
  }
}
